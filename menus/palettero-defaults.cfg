editmenu                                                    # Add your own custom commands to palettero command palette
updatemenu                                                  # Collect all help and colorscheme runtime files, including plugins
textfilter grep -v '^\s*$'                                  # Remove empty lines
textfilter py -x 're.sub("\s+$", "", x)'                    # Remove trailing whitespace at the end of line
textfilter tr '\n' ' '                                      # Join lines, convert newline to space
textfilter sort --unique                                    # Remove duplicate lines and sort - similar to 'sort foo.txt|uniq'
textfilter grep -oP '\w+@\w+'                               # Extract email addresses, regular expression hits only matching
textfilter grep -oP '\S+://\S+'                             # Extract URLs, regular expression hits only matching (http, https, ftp...)
textfilter tr ',' '\n'                                      # Split comma separated list to multiple lines
textfilter xxd                                              # Address, hex dump and ASCII - show hidden characters
textfilter tr '|?=' '\n'                                    # Split webmail uglified links that record user clicks, after URL decode
textfilter sort                                             # A-Z, ascending alphabethical order
textfilter sort -r                                          # Z-A, descending alphabethical order
textfilter awk '{print $2 " " $1}'                          # Swap first and second word
textfilter fold -s -w 79                                    # Hard wrap
textfilter nl                                               # Number lines
textfilter tr ' ' ','                                       # Space to comma
textfilter tr '\n' ','                                      # Newline to comma, join lines
textfilter py -x x.lower()                                  # To lower case - depends on pythonpy
textfilter py -x x.title()                                  # To title Case - depends on pythonpy
goto 99999999                                               # Jump to end of file, bottom of text
goto 1                                                      # Jump to start of file, first line of document, start of text
set ftoptions `true|false`                                  # Force indent with tabs in Go/makefiles but spaces in YAML/Python/Nim/fish. Also: 'set tabstospaces'
set tabstospaces `true|false`                               # Insert spaces with tab
set tabsize `n`                                             # Display width of tab
retab                                                       # Convert indentation to tabs/spaces, as you have chosen with 'set tabstospaces'
set ruler `true|false`                                      # Toggle line numbers
set softwrap `true|false`                                   # Wrap lines to fit screen, but don't really insert newlines. Also: 'set wordwrap'
set wordwrap `true|false`                                   # Wrap at white space. Also: 'set softwrap'
set autoclose `true|false`                                  # Automatically add matching brackets (){}[]
textfilter base64                                           # ASCII armor so that binary can be copy-pasted as text
textfilter base64 --decode                                  # Convert ASCII armored text back to binary; base64 often ends with "="
textfilter tr '[a-zA-Z]' '[n-za-mN-ZA-M]'                   # Rot13, caesar encryption, a simple substitute cipher
textfilter py -x 'urllib.parse.unquote(x)'                  # URL decode - depends on pythonpy
textfilter tr -s ' '                                        # Squeeze space, convert multiple spaces to one
reset colorscheme                                           # Reset colorscheme setting to default. Also: 'set colorscheme'
plugin list                                                 # List installed plugins
plugin available                                            # List plugins that could be installed with 'plugin install jump'
plugin install `name`                                       # Install a plugin from the list shown by 'plugin available'
plugin search `keyword`                                     # Search plugin names
set `option` `value`                                        # Set micro options, such as ruler, softwrap, tabstospaces...
reset `option`                                              # Reset a setting to it's default value 'reset colorscheme'
setlocal `option` `value`                                   # Set an option just for this buffer (current document), 'setlocal readonly on'
show `option`                                               # Show value of an option, 'show colorscheme'
showkey `key`                                               # Shows action for a key binding, 'showkey Ctrl-P'
run `sh-command`                                            # Run a shell command in the background 'run touch /tmp/palettero-was-here', no output, only exit status
bind `key` `action`                                         # Bind a key to action, 'bind Ctrl-J command:palettero'
unbind `key`                                                # Should bind key to its default action, but did not work in the tested version
quit                                                        # Quit micro, typically Ctrl-Q
goto `line`                                                 # Jump to line, first line is 1. 'goto 88'
jump `line`                                                 # Jump relative to line, next line is 1. 'goto -8'
save `[filename]`                                           # Save current buffer (the document you're editing). Often Ctrl-S
replace `search` `value` `[-l]`                             # Interactively replace each "foo" with "BAR", ask for each, 'replace foo BAR'. Regexp support unless flagged as literal search
replaceall `search` `value` `[-l]`                          # Immediately replace all "foo" with "BAR", 'replaceall foo BAR'. Regexp support unless flagged as literal search
vsplit `[filename]`                                         # Open new vertical split on right side, optionally open named file. 'vsplit right.md'
hsplit `[filename]`                                         # Open a new horizontal split on the bottom, optionally open file. 'hsplit bottom.md'
tab `[filename]`                                            # Open a new tab, optionally open a file 'tab tero.md'
help                                                        # Open help in a new bottom hsplit, optionally at given document 'help plugins'
log                                                         # Toggle log view. Mostly commands given with Ctrl-E command bar, can have other logs
reload                                                      # Reload all configuration files: syntax, colorschemes...
reopen                                                      # Load current buffer (the file you're editing) from disk
cd `path`                                                   # Change working directory
pwd                                                         # Print working directory
open `[filename]`                                           # Open a new file for editing. Tab completes filenames
tabmove `[-+]n`                                             # Move the current tab to given index, 1 is the first
tabswitch `filename|index`                                  # Select given tab, 1 is the first
term                                                        # Open terminal in a new tab
memusage                                                    # Show how much micro is taking RAM memory
raw                                                         # Show escape sequences of keys you press, in a new tab
textfilter `sh-command`                                     # Run any command to edit selection, 'textfilter tr "a" "B"'
lint                                                        # Lint the current file for errors
comment                                                     # Comment or uncomment current selection or line
