editmenu                                                         # Add your own custom commands to palettero command palette
updatemenu                                                       # Collect all help and colorscheme runtime files, including plugins
textfilter grep -v '^\s*$'                                       # Remove empty lines
textfilter py -x 're.sub("\s+$", "", x)'                         # Remove trailing whitespace at the end of line
textfilter busybox tr '\n' ' '                                   # Join lines, convert newline to space
textfilter sort --unique                                         # Remove duplicate lines and sort - similar to 'sort foo.txt|uniq'
textfilter grep -oP '\w+@\w+'                                    # Extract email addresses, regular expression hits only matching
textfilter grep -oP '\S+://\S+'                                  # Extract URLs, regular expression hits only matching (http, https, ftp...)
textfilter busybox tr ',' '\n'                                   # Split comma separated list to multiple lines
textfilter busybox xxd                                           # Address, hex dump and ASCII - show hidden characters
textfilter busybox tr '|?=' '\n'                                 # Split webmail uglified links that record user clicks, after URL decode
textfilter sort                                                  # A-Z, ascending alphabethical order
textfilter sort -r                                               # Z-A, descending alphabethical order
textfilter busybox awk '{print $2 " " $1}'                       # Swap first and second word
textfilter busybox fold -s -w 79                                 # Hard wrap
textfilter busybox nl                                            # Number lines
textfilter tr ' ' ','                                            # Space to comma
textfilter tr '\n' ','                                           # Newline to comma, join lines
textfilter py -x x.lower()                                       # To lower case - depends on pythonpy
textfilter py -x x.title()                                       # To title Case - depends on pythonpy
goto 99999999                                                    # Jump to end of file, bottom of text
goto 1                                                           # Jump to start of file, first line of document, start of text
set colorscheme simple                                           # Black on white, daytime color theme +sensiblesettings
set ftoptions false                                              # Allow indent with tabs in Python, also: set tabstospaces false +sensiblesettings
set tabstospaces false                                           # Indent with tab +sensiblesettings
retab                                                            # Convert indentation to tabs/spaces, as you have chosen with 'set tabstospaces false'
set ruler true                                                   # Show line numbers
set ruler false                                                  # Hide line numbers
set softwrap true                                                # Wrap lines to fit screen, but don't really insert newlines. Also: set wordwrap true
set wordwrap true                                                # Wrap at white space. Also: set softwrap true
set autoclose false                                              # Don't automatically add matching brackets (){}[]
textfilter base64                                                # ASCII armor so that binary can be copy-pasted as text
textfilter base64 --decode                                       # Convert ASCII armored text back to binary; base64 often ends with "="
textfilter busybox tr '[a-zA-Z]' '[n-za-mN-ZA-M]'                # Rot13, caesar encryption, a simple substitute cipher
textfilter py -x 'urllib.parse.unquote(x)'                       # URL decode - depends on pythonpy
textfilter busybox tr -s ' '                                     # Squeeze space, convert multiple spaces to one
reset colorscheme                                                # Reset colorscheme setting to default. See also: 'set colorscheme simple'
plugin list                                                      # List installed plugins
plugin available                                                 # List plugins that could be installed with 'plugin install jump'
plugin install                                                   # Install a plugin from the list shown by 'plugin available'
plugin search jump                                               # Search plugin names
set                                                              # Set micro options, such as ruler, softwrap, tabstospaces...
reset                                                            # Reset a setting to it's default value 'reset colorscheme'
setlocal                                                         # Set an option just for this buffer (current document), 'setlocal readonly on'
show                                                             # Show value of an option, 'show colorscheme'
showkey                                                          # Shows action for a key binding, 'showkey Ctrl-P'
run                                                              # Run a shell command in the background 'run touch /tmp/palettero-was-here', no output, only exit status
bind                                                             # Bind a key to action, 'bind Ctrl-J command:palettero'
unbind                                                           # Should bind key to its default action, but did not work in the tested version
help plugins                                                     # Plugin developer help, Lua coding and accessing micro Go internals with Lua
quit                                                             # Quit micro, typically Ctrl-Q
goto                                                             # Jump to line, first line is 1. 'goto 88'
save                                                             # Save current buffer (the document you're editing). Often Ctrl-S. 
replace                                                          # Interactively replace each "foo" with "BAR", ask for each, 'replace foo BAR'. Regexp support. 
replaceall                                                       # Immediately replace all "foo" with "BAR", 'replaceall foo BAR'. Regexp support. 
vsplit                                                           # Open new vertical split on right side, optionally open named file. 'vsplit right.md'
hsplit                                                           # Open a new horizontal split on the bottom, optionally open file. 'hsplit bottom.md'
tab                                                              # Open a new tab, optionally open a file 'tab tero.md'
help                                                             # Open help in a new bottom hsplit, optionally at given document 'help plugins'
eval                                                             # Unsupported - would evaluate a Lua expression, but is not implemented in the version tested
log                                                              # Toggle log view. Mostly commands given with Ctrl-E command bar, can have other logs.
plugin                                                           # Install, remove, update (plugins); list (installed), (show) available (but not installed), search
reload                                                           # Reload all configuration files: syntax, colorschemes...
reopen                                                           # Load current buffer (the file you're editing) from disk
cd                                                               # Change working directory
pwd                                                              # Print working directory
open                                                             # Open a new file for editing. Tab completes filenames. 
tabmove                                                          # Move the current tab to given index, 1 is the first. 
tabswitch                                                        # Select given tab, 1 is the first
term                                                             # Open terminal in a new tab
memusage                                                         # Show how much micro is taking RAM memory
raw                                                              # Show escape sequences of keys you press, in a new tab
textfilter                                                       # Run any command to edit selection, 'textfilter tr "a" "B"'
help colors                                                      # Syntax highlight
help commands                                                    # Used by palettero and ctrl-e command bar
help copypaste                                                   # Micro supports multiple clipboards and many ways to copy-paste
help defaultkeys                                                 # Hotkeys, bindings and keyboard shortcuts, like 'help keybindings'
help help                                                        # Intro to micro help
help keybindings                                                 # Hotkeys, bindings and keyboard shortcuts, 'help defaultkeys'
help options                                                     # Settings of micro, like 'set ftoptions off', 'set tabstospaces false', 'set autoclose false'
help plugins                                                     # Develop and write your own plugins using Lua (and Go interfaces trough Lua)
help tutorial                                                    # Configuring micro with settings, keybindings and init.lua
